#!/usr/bin/env node
const fs = require(`fs`);
const path = require(`path`);
const program = require(`commander`);
const spawn = require(`child_process`).spawn;
const pkga = require(`../package.json`);

let name;
let template;
let repo;
const argv = program
.arguments(`<name> <template>`)
.action(function(_name, _template){
  name = _name;
  template = _template.split(`/`);
  if(template.length === 1){
    repo = `main`;
    template = template[0];
  }else{
    repo = template[0];
    template = template[1];
  }
})
.parse(process.argv);
const templateLocation = path.join(process.cwd(), `.${pkga.name}`, `repository`, repo, `templates`, template);
const packageLocation = path.join(templateLocation, `package.json`);
let pkg;
try{
  pkg = require(path.join(templateLocation, `package.json`));
}catch(e){
  pkg = {};
}
const dependencies = pkg.devDependencies || {};
const installs = [];
for(let dep in dependencies){
  if(typeof dependencies.hasOwnProperty === `function` && !dependencies.hasOwnProperty(dep)){
    continue;
  }
  installs.push(`${dep}@${dependencies[dep]}`.replace(`^`,``))
}
//Install Any Pre-requesite NPM Modules
const installation = spawn(
  `npm`,
    [`install`, `--save-dev`].concat(installs),
    {stdio:`inherit`});
installation.on(`error`, (error)=>{
  process.stderr.write(String(error));
});

installation.on(`exit`,()=>{
  const scriptLocation = path.join(templateLocation, pkg.main || `index.js`);
  Promise.resolve(require(scriptLocation)(argv)).then(command=>{
    //Add script to package
    const addition = spawn(
      `npm`,
      [`run`, `scrimp`, `add-script`, name, command],
      {stdio:`inherit`});
  }).catch(error=>{
    process.stderr.write(String(error));
  });
});
